%YAML 1.2
---
# See http://www.sublimetext.com/docs/3/syntax.html
name: SkoolkitZ80
uuid: 9bc94818-fe48-433a-adf5-5f0e3b405b2c
file_extensions:
  - sft
  - skool
scope: source.skoolkit

variables:
  address: '\$(?:[0-9A-F]){4}|[0-9]{5}'
  hex_number: '\$(?:[0-9A-F][0-9A-F]){1,2}'
  oct_number: '@[0-9]+'
  bin_number: '%[01]+'
  dec_number: '-?[0-9.]+'

contexts:
  # The prototype context is prepended to all contexts but those setting
  # meta_include_prototype: false.
  prototype:
    - include: comments

  main:
    # The main context is the initial starting point of our syntax.
    # Include other contexts from here (or specify them directly).
    - include: opcodes
    - include: registers
    - include: data_directives
    - include: addresses
    - include: numbers
    - include: strings
    - include: asm_directives

  # Note that blackslashes don't need to be escaped within single quoted strings
  # in YAML. When using single quoted strings, only single quotes need to be
  # escaped: this is done by using two single quotes next to each other.

  opcodes:
    - match: '\b(CALL|JP|JR)\s+({{address}})'
      comment: "CALL, JP, JR an address"
      captures:
        1: keyword.control.opcode.ret.skoolkit
        2: keyword.control.opcode.ret.address.skoolkit
    - match: '\b(CALL|JP|JR)\s+(\((?:AF|BC|DE|HL|SP|IX|IY|[0-9]+)(?:\+{{address}})?\))'
      comment: "CALL, JP, JR an address via a pointer"
      captures:
        1: keyword.control.opcode.ret.skoolkit
        2: keyword.control.register.pointer.skoolkit
    - match: '\b(CALL|JP|JR)\s+(Z|NZ|C|NC|PO|PE|P|M),({{address}})'
      comment: "Special case: conditional CALL/JMP"
      captures:
        1: keyword.control.opcode.ret.skoolkit
        2: keyword.control.opcode.ret.condition.skoolkit
        3: keyword.control.opcode.ret.address.skoolkit
    - match: '\b(DJNZ)\s+({{address}})'
      comment: "Special case: DJNZ"
      captures:
        1: keyword.control.opcode.djnz.skoolkit
        2: keyword.control.opcode.djnz_address.skoolkit
    - match: '\b(RET)\b(?:\s+(Z|NZ|C|NC|PO|PE|P|M)\b)?'
      comment: "Special case: conditional RET"
      captures:
        1: keyword.control.opcode.ret.skoolkit
        2: keyword.control.opcode.ret.condition.skoolkit
    - match: '\b(ADC|ADD|AND|BIT|CCF|CP|CPL|CPD|CPDR|CPI|CPIR|DAA|DEC|DI|DJNZ|EI|EX|EXX|HALT|IM|IN|INC|IND|INDR|INF|INI|INIR||NEG|NOP|EXX|OR|OTDR|OTIR|OUT|OUTD|OUTI|POP|PUSH|RES|RETI|RETN|RL|RLA|RLC|RLCA|RLD|RR|RRA|RRC|RRCA|RRD|RST|SBC|SCF|SET|SLA|SLI|SLL|SRA|SRL|SUB|XOR)\b'
      scope: keyword.control.opcode.cpu.skoolkit
    - match: '\b(LD|LDD|LDDR|LDI|LDIR)\b'
      scope: keyword.control.opcode.ld.skoolkit

  registers:
    - match: '\b(?:AF|BC|DE|HL)'''
      comment: "16-bit shadow registers (note: escaped single quote)"
      scope: keyword.control.register.skoolkit
    - match: '\b(?:AF|BC|DE|HL|PC|SP|IX|IY)\b'
      comment: "16-bit registers"
      scope: keyword.control.register.skoolkit
    - match: '\((?:AF|BC|DE|HL|SP|IX|IY|[0-9]+)(?:\+[0-9]+)?\)'
      comment: "Pointer to 16-bit register/address"
      scope: keyword.control.register.pointer.skoolkit
    - match: '\b(?:HX|HY|LX|LY)\b'
      comment: "Undocumented 8-bit registers"
      scope: keyword.control.register.skoolkit
    - match: '\b(A|B|C|D|E|F|H|I|L|R|IXH|IXL|IYH|IYL|LX|LY|YL|YH)\b'
      comment: "8-bit registers"
      scope: keyword.control.register.skoolkit

  data_directives:
    - match: '\b(DEFB|DEFM|DEFW|DEFS)\b'
      scope: storage.type.datadef.asm.skoolkit

  addresses:
    - match: '^([bcgistuw]+)({{address}})\s+'
      captures:
        1: comment.line.block_id.skoolkit
        2: constant.numeric.address.start.skoolkit
    - match: '^(\*)({{address}})\s+'
      captures:
        1: comment.line.block_id.skoolkit
        2: constant.numeric.address.jump.skoolkit
    - match: '^\s+({{address}})\s+'
      scope: constant.numeric.address.skoolkit

  numbers:
    - match: '{{hex_number}}'
      scope: constant.numeric.hex.skoolkit
    - match: '{{oct_number}}'
      scope: constant.numeric.octal.skoolkit
    - match: '{{bin_number}}'
      scope: constant.numeric.binary.skoolkit
    - match: '{{dec_number}}'
      scope: constant.numeric.skoolkit

  strings:
    - match: '"'
      comment: "Strings begin/end with double quotes"
      scope: punctuation.definition.string.begin.skoolkit
      push: inside_string

  inside_string:
    - meta_include_prototype: false
    - meta_scope: string.quoted.double.skoolkit
    - match: '\.'
      scope: constant.character.escape.skoolkit
    - match: '"'
      scope: punctuation.definition.string.end.skoolkit
      pop: true

  asm_directives:
    - match: '^(@(?!isub)(?:.+?))=(.+?)\s'
      captures:
        1: entity.name.directive.skoolkit
        2: entity.name.directive.value.skoolkit
    - match: '^(@[a-z]+)\b'
      scope: entity.name.directive.skoolkit

  comments:
    - match: ';'
      comment: "Skoolkit comments begin with a ';' and finish at EOL"
      scope: punctuation.definition.comment.skoolkit
      push:
        # This is an anonymous context push for brevity.
        - meta_scope: comment.line.semi-colon.skoolkit
        - match: $\n?
          pop: true
    - match: '//'
      comment: "Skoolkit comments can also begin with a '//', and finish at EOL"
      scope: punctuation.definition.comment.skoolkit
      push:
        # This is an anonymous context push for brevity.
        - meta_scope: comment.line.double-slash.skoolkit
        - match: $\n?
          pop: true
